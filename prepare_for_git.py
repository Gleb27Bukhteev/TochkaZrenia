#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Git
–£–¥–∞–ª—è–µ—Ç –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""

import os
import shutil
import sys

def remove_large_files():
    """–£–¥–∞–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –≤ Git"""
    print("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É OpenCV
    opencv_path = "CamCode/opencv"
    if os.path.exists(opencv_path):
        print(f"   –£–¥–∞–ª—è–µ–º {opencv_path}")
        shutil.rmtree(opencv_path)
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    log_file = "Site/templates/log.txt"
    if os.path.exists(log_file):
        print(f"   –£–¥–∞–ª—è–µ–º {log_file}")
        os.remove(log_file)
    
    # –£–¥–∞–ª—è–µ–º –∫—ç—à Python
    for root, dirs, files in os.walk("."):
        for dir_name in dirs:
            if dir_name == "__pycache__":
                cache_path = os.path.join(root, dir_name)
                print(f"   –£–¥–∞–ª—è–µ–º {cache_path}")
                shutil.rmtree(cache_path)
    
    print("‚úÖ –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

def create_git_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è Git"""
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è Git...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    log_file = "Site/templates/log.txt"
    os.makedirs(os.path.dirname(log_file), exist_ok=True)
    with open(log_file, 'w', encoding='utf-8') as f:
        f.write("# –õ–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–º–µ—Ä\n")
        f.write("# –≠—Ç–æ—Ç —Ñ–∞–π–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã\n")
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")

def check_git_ready():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ Git"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ Git...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .gitignore
    if not os.path.exists(".gitignore"):
        print("‚ùå –§–∞–π–ª .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ requirements.txt
    if not os.path.exists("requirements.txt"):
        print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
    large_files = []
    for root, dirs, files in os.walk("."):
        for file in files:
            if file.startswith('.'):
                continue
            file_path = os.path.join(root, file)
            try:
                size = os.path.getsize(file_path)
                if size > 50 * 1024 * 1024:  # 50MB
                    large_files.append((file_path, size))
            except:
                pass
    
    if large_files:
        print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã:")
        for file_path, size in large_files:
            print(f"   {file_path}: {size / 1024 / 1024:.1f}MB")
        return False
    
    print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ Git!")
    return True

def show_git_commands():
    """–ü–æ–∫–∞–∑ –∫–æ–º–∞–Ω–¥ –¥–ª—è Git"""
    print("\nüöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Git:")
    print("=" * 50)
    print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git:")
    print("   git init")
    print()
    print("2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤:")
    print("   git add .")
    print()
    print("3. –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç:")
    print("   git commit -m \"Initial commit: Camera monitoring system\"")
    print()
    print("4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:")
    print("   git remote add origin <URL_–í–ê–®–ï–ì–û_–†–ï–ü–û–ó–ò–¢–û–†–ò–Ø>")
    print()
    print("5. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:")
    print("   git push -u origin main")
    print()
    print("üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ DEPLOYMENT.md")

def main():
    print("üé• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–º–µ—Ä –∫ Git")
    print("=" * 50)
    
    # –£–¥–∞–ª—è–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
    remove_large_files()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    create_git_structure()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    if check_git_ready():
        show_git_commands()
    else:
        print("\n‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ Git. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        sys.exit(1)

if __name__ == "__main__":
    main()
